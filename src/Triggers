----------------------------------------------------------------------------------
--When a road (A->B) is added/deleted, you must ensure that the reverse road(B->A) is not already present for the same owner.
--BEGIN Roads:

CREATE OR REPLACE FUNCTION check_road_insert_ok() RETURNS TRIGGER AS $$
DECLARE
  alreadyexisting BOOLEAN;
  ownerisatethierplace BOOLEAN;
  ownerhasmoney BOOLEAN;
BEGIN
  alreadyexisting :=(
    EXISTS(
      SELECT ownerpersonnummer
      FROM Roads
      WHERE tocountry = NEW.fromcountry
        AND toarea = NEW.fromarea
        AND fromcountry = NEW.tocountry
        AND fromarea = NEW.toarea
        AND ownercountry = NEW.ownercountry
        AND ownerpersonnummer = NEW.ownerpersonnummer
      UNION
      SELECT ownerpersonnummer
      FROM Roads
      WHERE r.fromcountry = NEW.fromcountry
        AND r.fromarea = NEW.fromarea
        AND r.tocountry = NEW.tocountry
        AND r.toarea = NEW.toarea
        AND ownercountry = NEW.ownercountry
        AND ownerpersonnummer = NEW.ownerpersonnummer
    )
  );

  If (alreadyexisting) THEN
    RAISE EXCEPTION 'Road already exist with the same owner';
  ELSE
    ownerisatethierplace :=(
      EXISTS(
        SELECT ownerpersonnummer
        FROM Persons
        WHERE locationcountry = NEW.fromcountry
          AND locationarea = NEW.fromarea
          AND country = NEW.ownercountry
          AND personnummer = NEW.ownerpersonnummer
        UNION
        SELECT ownerpersonnummer
        FROM Persons
        WHERE locationcountry = NEW.tocountry
          AND locationarea = NEW.toarea
          AND country = NEW.ownercountry
          AND personnummer = NEW.ownerpersonnummer
      )
    );

    IF(ownerisatethierplace) THEN
      ownerhasmoney :=(
        (SELECT budget
        FROM Persons
        WHERE country = NEW.ownercountry
          AND personnummer = NEW.ownerpersonnummer)
        >=
        getval('roadprice')
      );

      IF( ownerhasmoney ) THEN
        UPDATE Persons SET budget = budget - getval('roadprice')
        WHERE NEW.ownercountry = country
          AND NEW.ownerpersonnummer = personnummer;
        RETURN NEW;
      ELSE
          RAISE EXCEPTION 'That person doesnt have enough money!';
      END IF;
    ELSE
      RAISE EXCEPTION 'That person isnt located in ether of those cities!';
    END IF;
  END IF;
END
$$ LANGUAGE 'plpgsql';


DROP TRIGGER IF EXISTS TryInsertNewRoad ON Roads;

CREATE TRIGGER TryInsertNewRoad BEFORE INSERT ON Roads
FOR EACH ROW
WHEN (pg_trigger_depth() < 1)
EXECUTE PROCEDURE check_road_insert_ok();
------------------- SHOULD FAIL BEGIN BEHÖVER SKRIVAS ORDENTLIGT
INSERT INTO Roads
VALUES(
  'Rus',
  'San',
  'Fin',
  'Hel',
  'Swe',
  '19960708-2667',
  111);
------------------ SHOULD FAIL END


/*
CREATE OR REPLACE FUNCTION road_deletion() RETURNS TRIGGER AS $$
DECLARE
  existingasis BOOLEAN;
  existingasreverse BOOLEAN;
BEGIN
  existingasis :=(
    (SELECT COUNT(p.country)
     FROM Roads r , Persons p
     WHERE r.fromcountry = OLD.fromcountry
           AND r.fromarea = OLD.fromarea
           AND r.tocountry = OLD.tocountry
           AND r.toarea = OLD.toarea
           AND NEW.ownercountry = country
           AND NEW.ownerpersonnummer = personnummer
    ) NOTNULL );
  existingasreverse :=(
    (SELECT COUNT(p.country)
     FROM Roads r , Persons p
     WHERE r.tocountry = NEW.fromcountry
           AND r.toarea = NEW.fromarea
           AND r.fromcountry = NEW.tocountry
           AND r.fromarea = NEW.toarea
           AND NEW.ownercountry = country
           AND NEW.ownerpersonnummer = personnummer
    ) NOTNULL );

  IF (existingasis) THEN
    DELETE
    FROM Roads r
    WHERE r.fromcountry = NEW.fromcountry
          AND r.fromarea = NEW.fromarea
          AND r.tocountry = NEW.tocountry
          AND r.toarea = NEW.toarea
          AND NEW.ownercountry = r.country
          AND NEW.ownerpersonnummer = r.personnummer;

  ELSEIF(exsistingasreverse) THEN
    DELETE
    FROM Roads r
    WHERE r.tocountry = NEW.fromcountry
          AND r.toarea = NEW.fromarea
          AND r.fromcountry = NEW.tocountry
          AND r.fromarea = NEW.toarea
          AND NEW.ownercountry = r.country
          AND NEW.ownerpersonnummer = r.personnummer;

  ELSE
    RAISE EXCEPTION 'No such road exist';
  END IF;
END;
$$ LANGUAGE 'plpgsql';
*/


/*CREATE OR REPLACE FUNCTION road_deletion() RETURNS TRIGGER AS $$
DECLARE
  existingasreverse BOOLEAN;
BEGIN
  existingasreverse :=(
    (SELECT COUNT(ownercountry)
     FROM Roads
     WHERE r.tocountry = OLD.fromcountry
           AND r.toarea = OLD.fromarea
           AND r.fromcountry = OLD.tocountry
           AND r.fromarea = OLD.toarea
           AND OLD.ownercountry = r.ownercountry
           AND OLD.ownerpersonnummer = r.ownerpersonnummer
    ) NOTNULL );

  IF(exsistingasreverse) THEN
    DELETE
    FROM Roads
    WHERE tocountry = OLD.fromcountry
          AND toarea = OLD.fromarea
          AND fromcountry = OLD.tocountry
          AND fromarea = OLD.toarea
          AND OLD.ownercountry = ownercountry
          AND OLD.ownerpersonnummer = ownerpersonnummer;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE 'plpgsql';


DROP TRIGGER IF EXISTS delete_road ON Roads;

CREATE TRIGGER delete_road BEFORE DELETE ON Roads
FOR EACH ROW
WHEN (pg_trigger_depth() < 1)
EXECUTE PROCEDURE road_deletion();*/


DELETE
FROM Roads
WHERE (fromcountry = 'Rus' OR fromcountry = 'Fin' )
      AND (fromarea = 'San' OR fromarea = 'Hel')
      AND (tocountry = 'Fin' OR tocountry = 'Rus' )
      AND (toarea = 'Hel' OR toarea = 'San')
      AND ownercountry = 'Swe'
      AND ownerpersonnummer = '199607082667';



CREATE OR REPLACE FUNCTION is_road_update_ok() RETURNS TRIGGER AS $$
DECLARE
  onlyroadtaxupdate BOOLEAN;
BEGIN
  onlyroadtaxupdate :=(
    NEW.ownercountry = OLD.ownercountry
    AND NEW.ownerpersonnummer = OLD.ownerpersonnummer
    AND NEW.fromarea = OLD.fromarea
    AND NEW.fromcountry = OLD.fromcountry
    AND NEW.toarea = OLD.toarea
    AND NEW.tocountry = OLD.tocountry
    AND roadtax >= 0
  );
  IF(onlyroadtaxupdate) THEN
    RETURN NEW;
  ELSE
    RAISE EXCEPTION 'Only roadtax is allowed to be updated (and > than 0!)';
  END IF;
END;
$$ LANGUAGE 'plpgsql';


DROP TRIGGER IF EXISTS road_update ON Roads;

CREATE TRIGGER road_update BEFORE UPDATE ON Roads
FOR EACH ROW
WHEN (pg_trigger_depth() < 1)
EXECUTE PROCEDURE is_road_update_ok();




--INSERT/DELETE/UPDATE Roads:
--Likewise, if a road (A--B) is about to be deleted, either A->B or B->A may be present in the Roads table. You should
--remove whichever one of those is present.

--When a road is created by a Person, ensure that that Person is located at either the startpoint or endpoint of that
--road, and deduct the price of the road (getval('roadprice')) from that Person's budget.

--Finally, make sure that only the roadtax field in a road can be updated, since the game does not allow a road to change
--the startpoint, endpoint or owner.

--END Roads
--------------------------------------------------------------------------------' ||

--BEGIN Person

CREATE OR REPLACE FUNCTION update_person() RETURNS TRIGGER AS $$
DECLARE
  okUpdateData BOOLEAN;
  isLegalMove BOOLEAN;
  moveCost INT;
  newLocationCity BOOLEAN;
  visitBonus INT;
  cityHasHotels BOOLEAN;
  cityVisit INT;
  numOfHotels INT;


BEGIN

  --We are not allowed to update the keys OR budget (but everything else?)
  okUpdateData :=(
    NEW.country = OLD.country
      AND NEW.personnummer = OLD.personnummer
      AND NEW.budget = OLD.budget
  );
  --If its okay to continue
  IF(NOT okUpdateData) THEN
    RAISE EXCEPTION 'You are not allowed to update the country or personnummer of a person!';
  ELSE

    --OLD
    --Person står i en area, när den ska gå någonstans måste man kolla att det finns en väg (if-sats (1))
    --Finns det en väg så ska man i första hand ta den som är gratis (if-sats (2))
    --i andra hand den som är billigast, dra då bort roadtax från person budget (else-sats (2))
    --updatera sedan att personen flyttat på sig
    --END OLD


    --Can the person reach the NEW.location from its OLD.location? (The possible ones exist in NextMoves)
    isLegalMove :=(
      EXISTS(
        SELECT personnummer
        FROM NextMoves
        WHERE NEW.personnummer = personnummer
          AND NEW.country = country
          AND NEW.locationcountry = destcountry
          AND NEW.locationarea = destarea
          AND OLD.locationcountry = locationcountry
          AND OLD.locationare = locationarea
      )
    );

    --If its okay
    IF(NOT isLegalMove) THEN
      RAISE EXCEPTION 'That person has no road connecting to that place!';
    ELSE

      --get the cost of that movement (should be fine if taken from NextMoves)
      moveCost :=(
        SELECT cost
        FROM NextMoves
        WHERE NEW.personnummer = personnummer
              AND NEW.country = country
              AND NEW.locationcountry = destcountry
              AND NEW.locationarea = destarea
              AND OLD.locationcountry = locationcountry
              AND OLD.locationare = locationarea
      );

      --If we can afford to move
      IF(moveCost > NEW.budget) THEN
        RAISE EXCEPTION 'That person cant afford moving!';
      ELSE


        --OLD
        --No money to the owner of road? else add an update for owner of traveled road (if self thatis allready 0 so useless addition but still valid)
        --Moved to innermost if, probably bad to update stuff when errors can occur
        --UPDATE Persons SET budget = budget - moveCost
        --WHERE NEW.personnummer = personnummer
          --AND NEW.country = country;
        --END OLD


        --Is NEW.location a city?
        newLocationCity := (
          EXISTS (SELECT name FROM Cities WHERE NEW.locationcountry = country AND NEW.locationarea = name )
        );

        --If it was then do this else just do update (return NEW?)
        IF(newlocationCity) THEN

          --get the visit bonus of city
          visitBonus :=(
            SELECT visitbonus
            FROM Cities
            WHERE NEW.locationcountry = country
                  AND NEW.locationarea = name
          );
          --if there was a bonus set it to 0
          --Moved to innermost if
          --IF(visitBonus > 0) THEN
            --UPDATE Cities SET visitbonus = 0
            --WHERE NEW.locationcountry = country
                  --AND NEW.locationarea = name;
          --END IF;

          --any hotels in the city?
          cityHasHotels :=(
            EXISTS (
              SELECT name
              FROM hotels
              WHERE locationcountry = NEW.locationcountry
                AND locationarea = NEW.locationarea
            )
          );

          --Yes ^^
          IF(cityHasHotels) THEN
            --set cityVisit cost from constant & count hotels in town
            cityVisit :=( getval('cityvisit') );
            numOfHotels :=(
              SELECT COUNT(name)
              FROM Hotels
              WHERE locationcountry = NEW.locationcountry
                    AND locationarea = NEW.locationarea
            );
          ELSE
            --No hotels = no cost, used in boolean expression
            cityVisit :=(0);
          END IF;

          --Make sure budget wont go below 0, perhaps no changes should be done if this isnt a thing?
          IF( (NEW.budget + visitBonus) < (cityVisit + moveCost) ) THEN
            RAISE EXCEPTION 'That person cant afford staying in that city';
          ELSE

            --No money to the owner of road?
            --add an update for owner of traveled road (if self thatis allready 0 so useless addition but still valid)
            UPDATE Persons SET budget = budget - moveCost
            WHERE NEW.personnummer = personnummer
                  AND NEW.country = country;

            --if there was a bonus set it to 0
            IF(visitBonus > 0) THEN
              UPDATE Cities SET visitbonus = 0
              WHERE NEW.locationcountry = country
                    AND NEW.locationarea = name;
            END IF;

            --update budget of traveler
            UPDATE Persons SET budget = budget + visitBonus - cityVisit
            WHERE NEW.personnummer = personnummer
                  AND NEW.country = country;

            --update budget of hotel owners  CAN YOU DO THIS?!?!?!
            IF(numOfHotels > 0) THEN
              UPDATE Persons AS p SET p.budget = p.budget + (cityVisit/numOfHotels)
              FROM Hotels h
              WHERE p.personnummer = h.ownerpersonnummer
                    AND p.country = h.ownercountry
                    AND NEW.locationcountry = h.locationcountry
                    AND NEW.locationarea = h.locationarea;
            END IF;
            --End with saying NEW is okay
            RETURN NEW;
          END IF;
        ELSE
          --End with saying NEW is okay
          RETURN NEW;
        END IF;
    END IF;


    --OLD
    --om person har gått till city, och det finns hotels, dra bort getval(’cityvisit’) från budget (if-sats (3))
    --dela upp getval(’cityvisit’) jämt mellan hotellägarna
    --om det finns visitbonus, ge det till person (if-sats (4))

    --lägg till visitbonus till budget (UPDATE)
    --nollställa visitbonus (UPDATE)
    --Ny if-sats med att dra bort cityvisit från budget
    --END OLD


    END IF;
  END IF;
  --OLD
  --RETURN NEW; ?? <-- säger att det var ok att fortsätta med de värdena som gavs (tror jag) // allan
END
$$ LANGUAGE 'plpgsql';


DROP TRIGGER IF EXISTS person_update ON Persons;

CREATE TRIGGER person_update BEFORE UPDATE ON Persons
FOR EACH ROW
WHEN (pg_trigger_depth() < 1)
EXECUTE PROCEDURE update_person();

--Komentarer:
--Person står i en area, när den ska gå någonstans måste man kolla att det finns en väg (if-sats (1))
--Finns det en väg så ska man i första hand ta den som är gratis (if-sats (2))
--i andra hand den som är billigast, dra då bort roadtax från person budget (else-sats (2))
--updatera sedan att personen flyttat på sig
--om person har gått till city, och det finns hotels, dra bort getval(’cityvisit’) från budget (if-sats (3))
--dela upp getval(’cityvisit’) jämt mellan hotellägarna
--om det finns visitbonus, ge det till person (if-sats (4))

--UPDATE Persons:
--A Person is always located in an Area. When a person moves, you must ensure that there is a road between the old
--and new area that Person is in.

--If there are multiple roads, use a free one if possible (a public road, or a road owned by that person), otherwise
--find the cheapest road and deduct the roadtax from the Person’s budget before updating the Person’s location to the
--new area.

--When a person moves to a city, and there are hotels in that city, deduct getval(’cityvisit’) for visiting a city from
--the Person’s budget and transfer that money equally to all hotelowners that have a hotel in that city.

--Finally, if a city has a visiting bonus, transfer it to the visiting Person.

--END Person
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
--BEGIN Hotels


CREATE OR REPLACE FUNCTION is_new_hotel_ok() RETURNS TRIGGER AS $$
DECLARE
  ownerallreadyintown BOOLEAN;
  ownerhasmoney BOOLEAN;
BEGIN
  ownerallreadyintown :=(
    EXISTS(
      SELECT ownerpersonnummer
      FROM Hotels
      WHERE locationcountry = NEW.locationcountry
        AND locationare = NEW.locationare
        AND ownercountry = NEW.ownercountry
        AND ownerpersonnummer = NEW.ownerpersonnummer
    )
  );
  IF(ownerallreadyintown) THEN
    RAISE EXCEPTION 'That person already has a hotel in that city';
  ELSE
    ownerhasmoney :=(
      (SELECT budget
       FROM Persons
       WHERE country = NEW.ownercountry
             AND personnummer = NEW.ownerpersonnummer)
      >=
      getval('hotelprice')
    );

    IF( ownerhasmoney ) THEN
      UPDATE Persons SET budget = budget - getval('hotelprice')
      WHERE NEW.ownercountry = country
            AND NEW.ownerpersonnummer = personnummer;
      RETURN NEW;
    ELSE
      RAISE EXCEPTION 'That person doesnt have enough money!';
    END IF;
  END IF;
END;
$$ LANGUAGE 'plpgsql';


DROP TRIGGER IF EXISTS hotel_insertion ON Hotels;

CREATE TRIGGER hotel_insertion BEFORE INSERT ON Hotels
FOR EACH ROW
WHEN (pg_trigger_depth() < 1)
EXECUTE PROCEDURE is_new_hotel_ok();

-------

CREATE OR REPLACE FUNCTION hotel_update_ok() RETURNS TRIGGER AS $$
DECLARE
  ownerallreadyintown BOOLEAN;
  onlyownerchanged BOOLEAN;
BEGIN
  ownerallreadyintown :=(
    EXISTS(
        SELECT ownerpersonnummer
        FROM Hotels
        WHERE locationcountry = NEW.locationcountry
              AND locationare = NEW.locationare
              AND ownercountry = NEW.ownercountry
              AND ownerpersonnummer = NEW.ownerpersonnummer
    )
  );
  IF(ownerallreadyintown) THEN
    RAISE EXCEPTION 'That person already has an hotel in that city';
  ELSE
    onlyownerchanged :=(
      OLD.locationcountry = NEW.locationcountry
      AND OLD.locationare = NEW.locationare
      AND OLD.name = NEW.name
    );

    IF( onlyownerchanged ) THEN
      RETURN NEW;
    ELSE
      RAISE EXCEPTION 'Only the owner of an hotel can be changed!';
    END IF;
  END IF;
END;
$$ LANGUAGE 'plpgsql';


DROP TRIGGER IF EXISTS hotel_update ON Hotels;

CREATE TRIGGER hotel_update BEFORE UPDATE ON Hotels
FOR EACH ROW
WHEN (pg_trigger_depth() < 1)
EXECUTE PROCEDURE hotel_update_ok();


-------



CREATE OR REPLACE FUNCTION hotel_sold() RETURNS TRIGGER AS $$
BEGIN
  UPDATE Persons SET budget = budget + (getval('hotelprice')*getval('hotelrefund'))
  WHERE OLD.ownercountry = country
    AND OLD.ownerpersonnummer = personnummer;
END;
$$ LANGUAGE 'plpgsql';


DROP TRIGGER IF EXISTS hotel_delete ON Hotels;

CREATE TRIGGER hotel_delete AFTER DELETE ON Hotels
FOR EACH ROW
WHEN (pg_trigger_depth() < 1)
EXECUTE PROCEDURE hotel_sold();

--INSERT/UPDATE Hotels When a hotel is created, the price of the hotel must be deducted from that Person’s budget.
--Hotels can not be moved to a new city, but they can change owner. Keep in mind that a Person can only own one Hotel
---per City. Persons can sell their hotel, in which case the hotel is deleted from the Hotels table. When that happens,
--the Person get refunded with a fraction (getval(’hotelrefund’)) of the price of the hotel (getval(’hotelprice’)).

--END Hotels
----------------------------------------------------------------------------------

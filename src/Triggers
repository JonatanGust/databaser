----------------------------------------------------------------------------------
--When a road (A->B) is added/deleted, you must ensure that the reverse road(B->A) is not already present for the same owner.
--BEGIN Roads:

CREATE OR REPLACE FUNCTION check_road_insert_ok() RETURNS TRIGGER AS $$
DECLARE
  alreadyexisting BOOLEAN;
  ownerisatethierplace BOOLEAN;
BEGIN
  alreadyexisting :=(
    EXISTS(
        SELECT *
     FROM (
            (SELECT *
             FROM Roads JOIN Persons AS p ON (ownercountry = p.country
                                            AND ownerpersonnummer = p.personnummer)
             WHERE tocountry = NEW.fromcountry
                   AND toarea = NEW.fromarea
                   AND fromcountry = NEW.tocountry
                   AND fromarea = NEW.toarea
                   AND NEW.ownercountry = p.country
                   AND NEW.ownerpersonnummer = p.personnummer)
            )
          UNION
            (SELECT *
             FROM Roads JOIN Persons AS p ON (ownercountry = p.country
                                             AND ownerpersonnummer = p.personnummer)
             WHERE r.fromcountry = NEW.fromcountry
                   AND r.fromarea = NEW.fromarea
                   AND r.tocountry = NEW.tocountry
                   AND r.toarea = NEW.toarea
                   AND NEW.ownercountry = p.country
                   AND NEW.ownerpersonnummer = p.personnummer)
            )
          ))
  );
  ownerisatethierplace :=(
    EXISTS(SELECT *
          FROM  (
             (SELECT *
                 FROM Persons
              WHERE locationcountry = NEW.fromcountry
                    AND locationarea = NEW.fromarea
                     AND NEW.ownercountry = country
                     AND NEW.ownerpersonnummer = personnummer) AS hue
              UNION
             (SELECT *
             FROM Persons
                    WHERE locationcountry = NEW.fromcountry
                    AND locationarea = NEW.fromarea
                     AND NEW.ownercountry = country
                     AND NEW.ownerpersonnummer = personnummer)AS huehue
             )
    );
  If (alreadyexisting) THEN
      RAISE EXCEPTION 'Road already exist with the same owner';
  ELSEIF(ownerisatethierplace) THEN
      UPDATE Persons SET budget = budget - getval('roadprice')
      WHERE NEW.ownercountry = country
            AND NEW.ownerpersonnummer = personnummer;
  END IF;
  RETURN NEW;
END
$$ LANGUAGE 'plpgsql';


DROP TRIGGER IF EXISTS TryInsertNewRoad ON Roads;

CREATE TRIGGER TryInsertNewRoad BEFORE INSERT ON Roads
FOR EACH ROW
WHEN (pg_trigger_depth() < 1)
EXECUTE PROCEDURE check_road_insert_ok();
------------------- SHOULD FAIL BEGIN
INSERT INTO Roads
VALUES(
  'Rus',
  'San',
  'Fin',
  'Hel',
  'Swe',
  '199607082667',
  111);
------------------ SHOULD FAIL END


/*
CREATE OR REPLACE FUNCTION road_deletion() RETURNS TRIGGER AS $$
DECLARE
  existingasis BOOLEAN;
  existingasreverse BOOLEAN;
BEGIN
  existingasis :=(
    (SELECT COUNT(p.country)
     FROM Roads r , Persons p
     WHERE r.fromcountry = OLD.fromcountry
           AND r.fromarea = OLD.fromarea
           AND r.tocountry = OLD.tocountry
           AND r.toarea = OLD.toarea
           AND NEW.ownercountry = country
           AND NEW.ownerpersonnummer = personnummer
    ) NOTNULL );
  existingasreverse :=(
    (SELECT COUNT(p.country)
     FROM Roads r , Persons p
     WHERE r.tocountry = NEW.fromcountry
           AND r.toarea = NEW.fromarea
           AND r.fromcountry = NEW.tocountry
           AND r.fromarea = NEW.toarea
           AND NEW.ownercountry = country
           AND NEW.ownerpersonnummer = personnummer
    ) NOTNULL );

  IF (existingasis) THEN
    DELETE
    FROM Roads r
    WHERE r.fromcountry = NEW.fromcountry
          AND r.fromarea = NEW.fromarea
          AND r.tocountry = NEW.tocountry
          AND r.toarea = NEW.toarea
          AND NEW.ownercountry = r.country
          AND NEW.ownerpersonnummer = r.personnummer;

  ELSEIF(exsistingasreverse) THEN
    DELETE
    FROM Roads r
    WHERE r.tocountry = NEW.fromcountry
          AND r.toarea = NEW.fromarea
          AND r.fromcountry = NEW.tocountry
          AND r.fromarea = NEW.toarea
          AND NEW.ownercountry = r.country
          AND NEW.ownerpersonnummer = r.personnummer;

  ELSE
    RAISE EXCEPTION 'No such road exist';
  END IF;
END;
$$ LANGUAGE 'plpgsql';
*/


CREATE OR REPLACE FUNCTION road_deletion() RETURNS TRIGGER AS $$
DECLARE
  existingasreverse BOOLEAN;
BEGIN
  existingasreverse :=(
    (SELECT COUNT(ownercountry)
     FROM Roads
     WHERE r.tocountry = OLD.fromcountry
           AND r.toarea = OLD.fromarea
           AND r.fromcountry = OLD.tocountry
           AND r.fromarea = OLD.toarea
           AND OLD.ownercountry = r.ownercountry
           AND OLD.ownerpersonnummer = r.ownerpersonnummer
    ) NOTNULL );

  IF(exsistingasreverse) THEN
    DELETE
    FROM Roads
    WHERE tocountry = OLD.fromcountry
          AND toarea = OLD.fromarea
          AND fromcountry = OLD.tocountry
          AND fromarea = OLD.toarea
          AND OLD.ownercountry = ownercountry
          AND OLD.ownerpersonnummer = ownerpersonnummer;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE 'plpgsql';


DROP TRIGGER IF EXISTS delete_road ON Roads;

CREATE TRIGGER delete_road BEFORE DELETE ON Roads
FOR EACH ROW
WHEN (pg_trigger_depth() < 1)
EXECUTE PROCEDURE road_deletion();


DELETE
FROM Roads
WHERE fromcountry = 'Rus'
      AND fromarea = 'San'
      AND tocountry = 'Fin'
      AND toarea = 'Hel'
      AND ownercountry = 'Swe'
      AND ownerpersonnummer = '199607082667';


INSERT/DELETE/UPDATE Roads:
Likewise, if a road (A--B) is about to be deleted, either A->B or B->A may be present in the Roads table. You should
remove whichever one of those is present.

When a road is created by a Person, ensure that that Person is located at either the startpoint or endpoint of that
road, and deduct the price of the road (getval('roadprice')) from that Person's budget.

Finally, make sure that only the roadtax field in a road can be updated, since the game does not allow a road to change
the startpoint, endpoint or owner.

--END Roads
----------------------------------------------------------------------------------
--BEGIN Person

CREATE OR REPLACE FUNCTION update_person() RETURNS TRIGGER AS $$
DECLARE
    newLocationCity BOOLEAN;


BEGIN
--Person står i en area, när den ska gå någonstans måste man kolla att det finns en väg (if-sats (1))
--Finns det en väg så ska man i första hand ta den som är gratis (if-sats (2))
--i andra hand den som är billigast, dra då bort roadtax från person budget (else-sats (2))
--updatera sedan att personen flyttat på sig







--om person har gått till city, och det finns hotels, dra bort getval(’cityvisit’) från budget (if-sats (3))
--dela upp getval(’cityvisit’) jämt mellan hotellägarna
--om det finns visitbonus, ge det till person (if-sats (4))

    newLocationCity := (
        EXISTS (SELECT * FROM Cities WHERE NEW.locationcountry = country AND NEW.locationarea = name )
    );

IF(newlocationCity) THEN

    --lägg till visitbonus till budget (UPDATE)
    --nollställa visitbonus (UPDATE)
    --Ny if-sats med att dra bort cityvisit från budget



    END IF;
  --RETURN NEW; ??



END
$$ LANGUAGE 'plpgsql';



--Komentarer:
--Person står i en area, när den ska gå någonstans måste man kolla att det finns en väg (if-sats (1))
--Finns det en väg så ska man i första hand ta den som är gratis (if-sats (2))
--i andra hand den som är billigast, dra då bort roadtax från person budget (else-sats (2))
--updatera sedan att personen flyttat på sig
--om person har gått till city, och det finns hotels, dra bort getval(’cityvisit’) från budget (if-sats (3))
--dela upp getval(’cityvisit’) jämt mellan hotellägarna
--om det finns visitbonus, ge det till person (if-sats (4))

UPDATE Persons:
A Person is always located in an Area. When a person moves, you must ensure that there is a road between the old
and new area that Person is in.

If there are multiple roads, use a free one if possible (a public road, or a road owned by that person), otherwise
find the cheapest road and deduct the roadtax from the Person’s budget before updating the Person’s location to the
new area.

When a person moves to a city, and there are hotels in that city, deduct getval(’cityvisit’) for visiting a city from
the Person’s budget and transfer that money equally to all hotelowners that have a hotel in that city.

Finally, if a city has a visiting bonus, transfer it to the visiting Person.

--END Person
----------------------------------------------------------------------------------
--BEGIN Hotels





INSERT/UPDATE Hotels When a hotel is created, the price of the hotel must be deducted from that Person’s budget.
Hotels can not be moved to a new city, but they can change owner. Keep in mind that a Person can only own one Hotel
per City. Persons can sell their hotel, in which case the hotel is deleted from the Hotels table. When that happens,
the Person get refunded with a fraction (getval(’hotelrefund’)) of the price of the hotel (getval(’hotelprice’)).

--END Hotels
----------------------------------------------------------------------------------
